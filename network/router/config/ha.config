frontend public 
  bind :80
  mode http
  # 做acl的预检查
  tcp-request inspect-delay 5s
  tcp-request content accept if HTTP
  # Strip off Proxy headers to prevent HTTpoxy (https://httpoxy.org/)
  http-request del-header Proxy
  # DNS labels are case insensitive (RFC 4343), we need to convert the hostname into lowercase
  # before matching, or any requests containing uppercase characters will never match.
  http-request set-header Host %[req.hdr(Host),lower]
  # url  ：整个url
  # base : 返回主机名和路径的连接部分 即url的第一个斜杠开始到第一个问号结束
  # path : base去掉host
  # 在.map文件中使用found匹配模式，匹配规则为正则，并将查找结果赋值给secure_redirect
  # 所以我们在os_route_http_redirect.map看到的正则字符串
  acl secure_redirect base,map_reg(/var/lib/haproxy/conf/os_route_http_redirect.map) -m found
  # 将请求重定向为https 如果不指定条件将无条件应用
  redirect scheme https if secure_redirect
  # 根据base检索os_http_be.map，动态匹配使用哪个backend 
  use_backend %[base,map_reg(/var/lib/haproxy/conf/os_http_be.map)]
  # 默认使用此backend
  default_backend openshift_default

# public ssl accepts all connections and isn't checking certificates yet certificates to use will be
# determined by the next backend in the chain which may be an app backend (passthrough termination) or a backend
# that terminates encryption in this router (edge)
frontend public_ssl
  option tcplog
 
  bind :443
  tcp-request  inspect-delay 5s
  tcp-request content accept if { req_ssl_hello_type 1 }

  # if the connection is SNI and the route is a passthrough don't use the termination backend, just use the tcp backend
  # for the SNI case, we also need to compare it in case-insensitive mode (by converting it to lowercase) as RFC 4343 says
  
  # 判断请求是不是sni类型，route是不是 sni_passthrough类型
  
  acl sni req.ssl_sni -m found
  acl sni_passthrough req.ssl_sni,lower,map_reg(/var/lib/haproxy/conf/os_sni_passthrough.map) -m found
  
  # 如果两个条件都满足则匹配os_tcp_be.map，动态选择backend
  
  use_backend %[req.ssl_sni,lower,map_reg(/var/lib/haproxy/conf/os_tcp_be.map)] if sni sni_passthrough
  
  # 这里route的类型如果不是passthrough，即为edge, 都会将请求转发到本机，端口分别为no_sni/10443 ,sni/10444
  # sni根据域名采用不同的证书加密，no_sni是采用通配证书加密，两者都会去os_edge_reencrypt_be.map动态匹配backend

  # 如果只是sni，则跳转到be_sni的backend
  # if the route is SNI and NOT passthrough enter the termination flow
  use_backend be_sni if sni
  
  # 如果两个都不是，那将跳转到be_no_sni的backend
 
  # non SNI requests should enter a default termination backend rather than the custom cert SNI backend since it
  # will not be able to match a cert to an SNI host
  default_backend be_no_sni

# TLS SNI
# When using SNI we can terminate encryption with custom certificates.
# Certs will be stored in a directory and will be matched with the SNI host header
# which must exist in the CN of the certificate.  Certificates must be concatenated
# as a single file (handled by the plugin writer) per the haproxy documentation.
# Finally, check re-encryption settings and re-encrypt or just pass along the unencrypted
# traffic
backend be_sni
  server fe_sni 127.0.0.1:10444 weight 1 send-proxy

frontend fe_sni
  # terminate ssl on edge
  bind 127.0.0.1:10444 ssl no-sslv3 crt /etc/pki/tls/private/tls.crt crt-list /var/lib/haproxy/conf/cert_config.map accept-proxy
  mode http
  # Strip off Proxy headers to prevent HTTpoxy (https://httpoxy.org/)
  http-request del-header Proxy
  http-request set-header Host %[req.hdr(Host),lower]
  # map to backend
  # Search from most specific to general path (host case).
  # Note: If no match, haproxy uses the default_backend, no other
  #       use_backend directives below this will be processed.
  # map to backend
  use_backend %[base,map_reg(/var/lib/haproxy/conf/os_edge_reencrypt_be.map)]
  default_backend openshift_default


# TLS NO SNI
# When we don't have SNI the only thing we can try to do is terminate the encryption
# using our wild card certificate.  Once that is complete we can either re-encrypt
# the traffic or pass it on to the backends
# backend for when sni does not exist, or ssl term needs to happen on the edge
backend be_no_sni
  server fe_no_sni 127.0.0.1:10443 weight 1 send-proxy

frontend fe_no_sni
  # terminate ssl on edge
  bind 127.0.0.1:10443 ssl no-sslv3 crt /etc/pki/tls/private/tls.crt accept-proxy
  mode http
  http-request del-header Proxy
  http-request set-header Host %[req.hdr(Host),lower]
  use_backend %[base,map_reg(/var/lib/haproxy/conf/os_edge_reencrypt_be.map)]
  default_backend openshift_default


backend openshift_default
  mode http
  option forwardfor
  #option http-keep-alive
  option http-pretend-keepalive

backend be_http:app:app-service
  mode http
    # 当使用cookie进行会话保持的时候，下次请求会转发到后端的同一个server里，但是如果该server不能提供服务发生宕机时候，该选项会强制将请求转发给其他正常的server
  option redispatch
    # 该选项允许在请求头中插入X-Forwarded
  option forwardfor
	# 负载均衡策略 最小连接数
  balance leastconn

  timeout check 5000ms
  http-request set-header X-Forwarded-Host %[req.hdr(host)]
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  http-request set-header X-Forwarded-Proto-Version h2 if { ssl_fc_alpn -i h2 }
  http-request add-header Forwarded for=%[src];host=%[req.hdr(host)];proto=%[req.hdr(X-Forwarded-Proto)];proto-version=%[req.hdr(X-Forwarded-Proto-Version)]
  # 在第一次响应中插入
  set-cookie k=v1
  或者
  set-cookie k=v2
  还得加上一个后端服务设置的cookie
  set-cookie : xxxsession=xxx
  当下次请求的时候，会转发到同一个server，并且使用indirect字段会删除ha设置的cookie，这样服务端只能看到自己设置的cookie
  当有一个server宕机了，haproxy会重新设置cookie，并将请求转发给新的服务端，如果服务端的session不共享，那将不能识别前一个服务端设置的session，即会话断开
  同时不能设置cookie名相同，即服务端设置的cookie名和ha设置的cookie名不能一致，不然ha会重写服务端的cookie，这样下次请求的时候服务端虽然认识cookie的key,但不能找到对应的value
  如果使用prefix[它用于客户端不能有多个set-cookie的时候]，ha将在服务端设置的cookie上加上前缀（这个前缀就是sever指令指定的），在下次请求的时候根据前缀转发给对应的server，并自动移除此前缀，使得服务端只能看到自己设置的cookie
  
  还有就是设置nocache，这样可以避免客户端多个页面共享一个cookie，导致某一个server流量大
  cookie k insert indirect nocache httponly
  server A 10.1.174.193:8080 cookie v1 weight 256 check inter 5000ms
  server B 10.1.98.129:8080 cookie v2 weight 256 check inter 5000ms

backend be_edge_http:app:app-gateway
  mode http
  option redispatch
  option forwardfor
  balance leastconn

  timeout check 5000ms
  http-request set-header X-Forwarded-Host %[req.hdr(host)]
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  http-request set-header X-Forwarded-Proto-Version h2 if { ssl_fc_alpn -i h2 }
  http-request add-header Forwarded for=%[src];host=%[req.hdr(host)];proto=%[req.hdr(X-Forwarded-Proto)];proto-version=%[req.hdr(X-Forwarded-Proto-Version)]
  cookie k insert indirect nocache httponly
  server A 10.1.148.141:9527 cookie v weight 256 check inter 5000ms


backend be_secure:openshift-console:console
  mode http
  option redispatch
  option forwardfor
  balance leastconn

  timeout check 5000ms
  http-request set-header X-Forwarded-Host %[req.hdr(host)]
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  http-request set-header X-Forwarded-Proto-Version h2 if { ssl_fc_alpn -i h2 }
  http-request add-header Forwarded for=%[src];host=%[req.hdr(host)];proto=%[req.hdr(X-Forwarded-Proto)];proto-version=%[req.hdr(X-Forwarded-Proto-Version)]
  cookie k insert indirect nocache httponly secure
  server A 10.1.33.195:8443 cookie v weight 256 ssl verifyhost console.openshift-console.svc verify required ca-file /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt check inter 5000ms

backend be_secure:openshift-infra:hawkular-metrics
  mode http
  option redispatch
  option forwardfor
  balance leastconn

  timeout check 5000ms
  http-request set-header X-Forwarded-Host %[req.hdr(host)]
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  http-request set-header X-Forwarded-Proto-Version h2 if { ssl_fc_alpn -i h2 }
  http-request add-header Forwarded for=%[src];host=%[req.hdr(host)];proto=%[req.hdr(X-Forwarded-Proto)];proto-version=%[req.hdr(X-Forwarded-Proto-Version)]
  cookie k insert indirect nocache httponly secure
  server A 10.1.24.100:8443 cookie v weight 256 ssl verify required ca-file /var/lib/haproxy/router/cacerts/openshift-infra:hawkular-metrics.pem
